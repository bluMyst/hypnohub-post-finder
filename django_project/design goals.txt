Overall design:

[ ] Automatically cache every post on Hypnohub and save all relevant info.
    [X] Automatically update existing posts with new info.
    [ ] Automatically delete posts to match deletions on HypnoHub.
[ ] Let users create accounts and log in.
    [ ] Let users recover their passwords via email.
    [ ] Put a "[username] - log out" on every page in the upper-right corner.
        [ ] Create /logout
[ ] Don't let users access certain pages unless they're logged in.
[ ] Have a simple "home" button or something like that, to lead them to an
    index page.
[ ] Let users vote on each post individually.
    [ ] Create /api/vote
[ ] Show users posts based on their previous votes
    [ ] Refactor and rewrite the Bayes Classifier to work with the new code and
        access the database.
    [ ] Allow users to sort posts in the following sorting methods:
        [ ] Best: Post rating, descending.
        [ ] Hot: Get the highest rating, and randomly pick posts within x% of
            that rating, such that there are a good number of posts to sort
            through.
        [ ] Random: Literally just a random Post.
    [ ] Create a PostRating model that stores a post, a user, and a float.
    [ ] Create a command to update PostRatings, for putting in crontab. (don't
        recalculate them on every vote, because that's way too inefficient)
    [ ] Delete PostRatings as soon as a Vote points to their associated Post.
[ ] Let users import their existing votes from Hypnohub
    [ ] Create a form for this. On submit, the user will get a message like
        "Processing your request now. It may take a while before your posts are
        added. You can stay on this page to view all added posts." Also it
        should have a little loading gif.
        [ ] Create a view to redirect to once the loading is done, that:
            [ ] Shows them the total count of posts added.
            [ ] Shows them previews of each post and lets them click each
                preview to go to that post's permalink page, inside HHPF.
[ ] Allow users to permalink to posts.
    [ ] Add a "permalink: [url]" textbox somewhere in the image viewer, with a
        "copy to clipboard" button.
[ ] Every page should be styled consistently.

Long-term goals (for when this is a real website being hosted somewhere):

[ ] Do everything over SSL.
    [ ] Register for an SSL certificate.
[ ] Make sure it's secure. Sounds so simple, doesn't it? At the very least,
    there are probably guides online that can give me a checklist of common
    mistakes.

TODO: This whole file is one giant todo.
      Just a note to self for when I'm running "git grep -i todo".
